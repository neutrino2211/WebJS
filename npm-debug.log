0 info it worked if it ends with ok
1 verbose cli [ 'C:\\Program Files\\nodejs\\node.exe',
1 verbose cli   'C:\\Program Files\\nodejs\\node_modules\\npm\\bin\\npm-cli.js',
1 verbose cli   'publish' ]
2 info using npm@3.10.10
3 info using node@v6.10.3
4 verbose publish [ '.' ]
5 silly cache add args [ '.', null ]
6 verbose cache add spec .
7 silly cache add parsed spec Result {
7 silly cache add   raw: '.',
7 silly cache add   scope: null,
7 silly cache add   escapedName: null,
7 silly cache add   name: null,
7 silly cache add   rawSpec: '.',
7 silly cache add   spec: 'C:\\Users\\ADMIN\\Desktop\\WebJS',
7 silly cache add   type: 'directory' }
8 verbose addLocalDirectory C:\Users\ADMIN\AppData\Roaming\npm-cache\wjs-cli\0.0.5\package.tgz not in flight; packing
9 verbose correctMkdir C:\Users\ADMIN\AppData\Roaming\npm-cache correctMkdir not in flight; initializing
10 info lifecycle wjs-cli@0.0.5~prepublish: wjs-cli@0.0.5
11 silly lifecycle wjs-cli@0.0.5~prepublish: no script for prepublish, continuing
12 verbose tar pack [ 'C:\\Users\\ADMIN\\AppData\\Roaming\\npm-cache\\wjs-cli\\0.0.5\\package.tgz',
12 verbose tar pack   'C:\\Users\\ADMIN\\Desktop\\WebJS' ]
13 verbose tarball C:\Users\ADMIN\AppData\Roaming\npm-cache\wjs-cli\0.0.5\package.tgz
14 verbose folder C:\Users\ADMIN\Desktop\WebJS
15 verbose addLocalTarball adding from inside cache C:\Users\ADMIN\AppData\Roaming\npm-cache\wjs-cli\0.0.5\package.tgz
16 verbose correctMkdir C:\Users\ADMIN\AppData\Roaming\npm-cache correctMkdir not in flight; initializing
17 silly cache afterAdd wjs-cli@0.0.5
18 verbose afterAdd C:\Users\ADMIN\AppData\Roaming\npm-cache\wjs-cli\0.0.5\package\package.json not in flight; writing
19 verbose correctMkdir C:\Users\ADMIN\AppData\Roaming\npm-cache correctMkdir not in flight; initializing
20 verbose afterAdd C:\Users\ADMIN\AppData\Roaming\npm-cache\wjs-cli\0.0.5\package\package.json written
21 silly publish { name: 'wjs-cli',
21 silly publish   bin: { wjs: './bin/wjs.js' },
21 silly publish   version: '0.0.5',
21 silly publish   description: 'The customisable webapp compiler ',
21 silly publish   main: 'index.js',
21 silly publish   scripts:
21 silly publish    { postinstall: 'node bin/webpack-check.js',
21 silly publish      test: 'echo "Error: no test specified" && exit 1' },
21 silly publish   keywords:
21 silly publish    [ 'App',
21 silly publish      'wjs',
21 silly publish      'webjs',
21 silly publish      'javascript',
21 silly publish      'typescript',
21 silly publish      'vue',
21 silly publish      'vue js',
21 silly publish      'web app' ],
21 silly publish   repository:
21 silly publish    { type: 'git',
21 silly publish      url: 'git+https://github.com/neutrino2211/webjs.git' },
21 silly publish   author: { name: 'Tsowa Mainasara Al-amin' },
21 silly publish   license: 'ISC',
21 silly publish   dependencies:
21 silly publish    { '@google-cloud/storage': '^1.4.0',
21 silly publish      'adm-zip': '^0.4.7',
21 silly publish      chalk: '^2.3.0',
21 silly publish      firebase: '^4.5.1',
21 silly publish      'fs-extra': '^4.0.1',
21 silly publish      'ts-loader': 'latest',
21 silly publish      typescript: '^2.6.1',
21 silly publish      websocket: '^1.0.25' },
21 silly publish   devDependencies:
21 silly publish    { '@google-cloud/storage': '^1.4.0',
21 silly publish      'adm-zip': '^0.4.7',
21 silly publish      firebase: '^4.5.1',
21 silly publish      'ts-loader': 'latest' },
21 silly publish   readme: '# wjs-cli:\r\n\r\n## customisable webapp compiler\r\n\r\n# Under development.\r\n\r\n## Getting started\r\n\r\n* First get node and npm\r\n\r\n* Run `npm install wjs-cli -g`\r\n\r\n* Run `wjs -v` to confirm installation\r\n\r\n* Run `wjs init <app-name> <app-type>` where app type can be any of `--typescript` , `--angular`(coming soon) ,`--vue` , `--react`(coming soon) , `--javascript` or leave app type out to initialize a javascript project\r\n\r\n* Run `cd <app-name> && wjs development` to start the development server\r\n\r\n* Open http://localhost:3100 in your browser to view the app\r\n\r\n* To add a dependency run `wjs add <module>` where the module can be a default module or a third party module\r\n\r\nFor a typescript project first `npm init` the project directory then install `ts-loader` and `typescript` with `npm install typescript ts-loader`.\r\n\r\nFor a vue project just `npm install` the project directory. \r\n\r\n### Note\r\n\r\nVue projects dont have modules yet.\r\n\r\n### Javascript\r\n\r\nThe default wjs hello world app entry point looks like this.\r\n\r\n```javascript\r\n//Declare imports here.\r\nimport * as wjs from "core"\r\nimport * as app from "wjs/app"\r\n\r\nclass Application{\r\n    constructor(){\r\n        wjs.print("ready");\r\n    }\r\n    \r\n    //Your apps entry point\r\n    onViewLoad(){\r\n        wjs.print("main");\r\n    }\r\n}\r\n\r\napp.load(Application)\r\n```\r\n\r\nObviously all it does is write "readymain" to the page\r\n\r\nBut you can also do more, like add html templates by extending the class with the `TemplateApplication` class in the definitions module\r\n\r\n```javascript\r\n//Declare imports here.\r\nimport * as wjs from "core"\r\nimport * as app from "wjs/app"\r\nimport { TemplateApplication } from "wjs/definitions";\r\n\r\nclass Application extends TemplateApplication{\r\n    constructor(){\r\n        //Call the super class\r\n        super();\r\n\r\n        this.template = //HTML code in a string, most preferably use backticks to fully express the html\r\n    }\r\n    \r\n    //Template load is used for template pages because the TemplateApplication class comes with its own onViewLoad\r\n    onTemplateLoad(){\r\n        //Code to run after the html renders\r\n    }\r\n}\r\n\r\napp.load(Application)\r\n```\r\n\r\nFor javascript apps the `WJSModule` feature is at a somewhat stable stage meaning not much will change and those changes won\'t affect your app much. It can be used like this\r\n\r\n```javascript\r\n\r\nimport * as wjs from "../webjs_modules/web"\r\nimport * as app from "../webjs_modules/app"\r\nimport { WJSModule } from "../webjs_modules/definitions"\r\n\r\nclass Application{\r\n    constructor(){\r\n        //Code to run before the app loads\r\n    }\r\n\r\n    onViewLoad(){\r\n        //Code to run after the app loads\r\n\r\n        WJSModule({\r\n            controller: /*Any page controller class*/,\r\n            template: /*Any html page*/,\r\n            styleSheets: /*An array of paths to stylesheets*/\r\n        });\r\n    }\r\n}\r\n\r\n```\r\nA page controller looks something like this\r\n\r\n```javascript\r\n//Imports can be made here just like any other module\r\nexport class PageName{\r\n    /*\r\n        Notice the class was exported beacause it needs to be imported in the app entry point.\r\n    */\r\n    constructor(){\r\n        //Code to run before the page loads\r\n    }\r\n\r\n    onViewLoad(){\r\n        //Code to run after the page loads\r\n    }\r\n}\r\n```\r\n\r\nUsing pages as modules is as easy as adding the new keyword to invoke the class e.g\r\n\r\n```javascript\r\n//Declare imports here.\r\nimport * as wjs from "core"\r\nimport * as app from "wjs/app"\r\nimport { PageName } from "path/to/PageName";\r\n\r\nclass Application{\r\n    constructor(){\r\n        //Code to run before the app loads\r\n    }\r\n    \r\n    //Your apps entry point\r\n    onViewLoad(){\r\n        new PageName();\r\n    }\r\n}\r\n\r\napp.load(Application)\r\n```\r\n\r\n### Typescript\r\n\r\nA typescript app is not much different from a javascript app but special cases will be added soon.\r\n\r\n### Vue\r\n\r\nFor vue apps just go ahead and read the docs at [the vue js site](https://vuejs.org/v2/guide/). But for development reasons the main.js file needs to import the `refresh.js` file given for browser hot-reload.\r\n\r\n```javascript\r\n// The Vue build version to load with the `import` command\r\n// (runtime-only or standalone) has been set in webpack.base.conf with an alias.\r\nimport Vue from \'vue\'\r\nimport App from \'./App\'\r\nimport router from \'./router\'\r\nimport "./refresh"\r\n\r\nVue.config.productionTip = false\r\n\r\n/* eslint-disable no-new */\r\nnew Vue({\r\n  el: \'#app\',\r\n  router,\r\n  template: \'<App/>\',\r\n  components: { App }\r\n})\r\n\r\n```\r\n\r\nBut vue specific modules are not ready yet so follow the vue docs only.\r\n\r\n## Modules\r\n\r\n### app\r\n\r\nthe app module has features like\r\n\r\n* jsx function\r\n\r\n* load function\r\n\r\n* events\r\n\r\n* socket\r\n\r\n* streams\r\n\r\n### streams, sockets and events\r\n\r\n```javascript\r\n//Declare imports here.\r\nimport * as wjs from "core"\r\nimport * as app from "wjs/app"\r\n\r\nclass Application{\r\n    constructor(){\r\n        /*\r\n            Socket demo\r\n        */\r\n        var socket = app.socket();\r\n        this._socket = socket.connect("echo.websocket.org")\r\n    }\r\n    \r\n    //Your apps entry point\r\n    onViewLoad(){\r\n        //Send message\r\n        this._socket.on("connection",()=>{\r\n            this._socket.send("Echo this back");\r\n        })\r\n        //Load emit function and on listener to the element\r\n        app.events.bind(document);\r\n        //Listen for the event\r\n        document.on("printed-message",()=>{\r\n            alert("Finished")\r\n        })\r\n        this._socket.on("message",(data)=>{\r\n            //Use the data, but in this case i will stream each letter to the print function\r\n\r\n            //Split the message into its characters and add html line endings\r\n            var datas = data.split("").join("<br>").split("");\r\n            //Emit the event and print the characters\r\n            document.emit("printed-message");\r\n            app.stream(datas).pipe(wjs.print)\r\n        })\r\n\r\n        //And you can remove event the element listeners by using app.events.strip(<element>);\r\n    }\r\n}\r\n\r\napp.load(Application)\r\n```\r\n\r\n#### load and JSX functions\r\n\r\n```javascript\r\n//Declare imports here.\r\nimport * as wjs from "core"\r\nimport * as app from "wjs/app"\r\n\r\nclass Application{\r\n    constructor(){\r\n        //Code to run before the page loads\r\n    }\r\n    \r\n    //Your apps entry point\r\n    onViewLoad(){\r\n        //JSX function accepts a funtion that returns a html string which the jsx function uses to create the html elements\r\n        var div = app.JSX(()=>{\r\n            //Stringify the document object\r\n            var document_to_json = JSON.stringify(document,undefined,"\\t");\r\n\r\n            return `\r\n            <pre>${document_to_json}</pre>\r\n            `\r\n        })\r\n\r\n        document.body.appendChild(div);\r\n    }\r\n}\r\n//Load function that bootstraps the applications\r\napp.load(Application)\r\n```\r\n\r\n### core\r\n\r\n* print\r\n\r\n* Jquery\r\n\r\nThe core module is very light for now but will get buff soon\r\n\r\n#### print function\r\n\r\nThis just writes text to the screen\r\n\r\n#### Jquery\r\n\r\nThis is the familiar `$` variable available the core module\r\n\r\n```javascript\r\n//Declare imports here.\r\nimport { $ } from "core"\r\nimport * as app from "wjs/app"\r\n\r\nclass Application{\r\n    constructor(){\r\n        $(document).load(()=>{\r\n            alert("Document loaded");\r\n        })\r\n    }\r\n\r\n    //Your apps entry point\r\n    onViewLoad(){\r\n        $("body").css("background-color","blue");\r\n    }\r\n}\r\n\r\napp.load(Application)\r\n```\r\n\r\n### definittions\r\n\r\nthe definitions module comes with \r\n\r\n* TemplateApplication class\r\n\r\n* WJSModule function\r\n\r\n#### WJSModule function\r\n\r\n```javascript\r\n\r\nimport * as wjs from "../webjs_modules/web"\r\nimport * as app from "../webjs_modules/app"\r\nimport { WJSModule } from "../webjs_modules/definitions"\r\n\r\nclass Application{\r\n    constructor(){\r\n        //Code to run before the app loads\r\n    }\r\n\r\n    onViewLoad(){\r\n        //Code to run after the app loads\r\n\r\n        WJSModule({\r\n            controller: /*Any page controller class*/,\r\n            template: /*Any html page*/,\r\n            styleSheets: /*An array of paths to stylesheets*/\r\n        });\r\n    }\r\n}\r\n\r\n```\r\n\r\n#### TemplateApplication class\r\n\r\n```javascript\r\n//Declare imports here.\r\nimport * as wjs from "core"\r\nimport * as app from "wjs/app"\r\nimport { TemplateApplication } from "wjs/definitions";\r\n\r\nclass Application extends TemplateApplication{\r\n    constructor(){\r\n        //Call the super class\r\n        super();\r\n\r\n        this.template = //HTML code in a string, most preferably use backticks to fully express the html\r\n    }\r\n    \r\n    //Template load is used for template pages because the TemplateApplication class comes with its own onViewLoad\r\n    onTemplateLoad(){\r\n        //Code to run after the html renders\r\n    }\r\n}\r\n\r\napp.load(Application)\r\n```\r\n\r\n### material\r\n\r\nthe material module has many features like\r\n\r\n* createElementClass\r\n\r\n* setElementClass\r\n\r\n* colors\r\n\r\n* icons\r\n\r\n#### createElementClass and setElementClass\r\n\r\nThis gives you the ability to add css classes in javascript!!! ikr\r\n\r\n```javascript\r\n//Declare imports here.\r\nimport * as wjs from "core"\r\nimport * as app from "wjs/app"\r\nimport * as material from "wjs/material"\r\n\r\nclass Application{\r\n    constructor(){\r\n        /*\r\n            Create class with the following syntax\r\n\r\n            material.createElementClass(<class-name>,{\r\n                "<property-name>": "<property-value>"\r\n            })\r\n\r\n            Set class with the following syntax\r\n\r\n            material.setElementClass(<element>,<class-name>)\r\n        */\r\n\r\n        material.createElementClass("title",{\r\n            "font-size":"50px"\r\n        })\r\n    }\r\n    \r\n    //Your apps entry point\r\n    onViewLoad(){\r\n        var paragraph = document.createElement("p");\r\n\r\n        material.setElementClass(paragraph,"title")\r\n\r\n        document.body.appendChild(paragraph)\r\n    }\r\n}\r\n\r\napp.load(Application)\r\n```\r\n\r\n#### icons and colors\r\n\r\nAll material standard colors and icons are present and ready to use\r\n\r\n```javascript\r\n//Declare imports here.\r\nimport * as wjs from "core"\r\nimport * as app from "wjs/app"\r\nimport * as material from "wjs/material"\r\n\r\nclass Application{\r\n    constructor(){\r\n        /*\r\n            Create an icon\r\n            The string argument is the name of the icon as if it were defined in html\r\n\r\n            var face = material.icons("face");\r\n\r\n            Set color\r\n\r\n            face.style.color = material.colors.blue;\r\n        */\r\n    }\r\n    \r\n    //Your apps entry point\r\n    onViewLoad(){\r\n        //Create an icon\r\n\r\n        var face = material.icons("face");\r\n\r\n        //Set color\r\n\r\n        face.style.color = material.colors.blue;\r\n\r\n        document.body.appendChild(face)\r\n    }\r\n}\r\n\r\napp.load(Application)\r\n```\r\n### TODO (More docs)\r\n\r\n## Changelog\r\n\r\n#### wjs-cli@0.0.1\r\n\r\n* Published wjs-cli on npm\r\n\r\n#### wjs-cli@0.0.2 \r\n\r\n* Added install feature to allow installation of any third party module\r\n\r\n#### wjs-cli@0.0.3\r\n\r\n* Created wjs-config.json file to allow specification of compile procedure and dependencies \r\n\r\n* Added `add` command to define project dependencies\r\n\r\n* Changed bootstrap procedure to load `Application.onViewLoad` instead of `Application.main`\r\n\r\n* Conducted unit tests for:\r\n    1. Config file\r\n    2. Compile procedure\r\n    3. module installation\r\n    4. Typescript application support\r\n\r\n* Made basic typescript modules namely  `app.ts` , `web.ts (core)`, `http.ts` , `definitions.ts` , `material.ts`\r\n#### wjs-cli@0.0.4\r\n\r\n* Bug fixes\r\n\r\n* Fixed errors in docs\r\n\r\n* Vue support\r\n\r\n#### wjs-cli@0.0.5\r\n\r\n* More bug fixes\r\n\r\n### Coming soon\r\n\r\n* More typescript modules.\r\n\r\n* Vue specific modules.\r\n\r\n* Complete docs (including module docs)\r\n\r\n* Android native build\r\n\r\n### **Deprecated**\r\n\r\n* run-dev command\r\n\r\n* device module\r\n\r\nFeel free to open an issue at [the github repo](https://github.com/neutrino2211/webjs/issues)',
21 silly publish   readmeFilename: 'readme.md',
21 silly publish   gitHead: '9ab039d4302c50f2e91c96f122584c6b274e5d81',
21 silly publish   bugs: { url: 'https://github.com/neutrino2211/webjs/issues' },
21 silly publish   homepage: 'https://github.com/neutrino2211/webjs#readme',
21 silly publish   _id: 'wjs-cli@0.0.5',
21 silly publish   _shasum: '3d8f1e6c8de324ac997a35c02d1b3a77ea893c44',
21 silly publish   _from: '.' }
22 verbose getPublishConfig undefined
23 silly mapToRegistry name wjs-cli
24 silly mapToRegistry using default registry
25 silly mapToRegistry registry https://registry.npmjs.org/
26 silly mapToRegistry data Result {
26 silly mapToRegistry   raw: 'wjs-cli',
26 silly mapToRegistry   scope: null,
26 silly mapToRegistry   escapedName: 'wjs-cli',
26 silly mapToRegistry   name: 'wjs-cli',
26 silly mapToRegistry   rawSpec: '',
26 silly mapToRegistry   spec: 'latest',
26 silly mapToRegistry   type: 'tag' }
27 silly mapToRegistry uri https://registry.npmjs.org/wjs-cli
28 verbose publish registryBase https://registry.npmjs.org/
29 silly publish uploading C:\Users\ADMIN\AppData\Roaming\npm-cache\wjs-cli\0.0.5\package.tgz
30 verbose request uri https://registry.npmjs.org/wjs-cli
31 verbose request sending authorization for write operation
32 info attempt registry request try #1 at 2:43:43 PM
33 verbose request using bearer token for auth
34 verbose request id b59a39aa253eff2e
35 http request PUT https://registry.npmjs.org/wjs-cli
36 http 403 https://registry.npmjs.org/wjs-cli
37 verbose headers { 'content-type': 'application/json',
37 verbose headers   'cache-control': 'max-age=300',
37 verbose headers   'content-length': '91',
37 verbose headers   'accept-ranges': 'bytes',
37 verbose headers   date: 'Sat, 25 Nov 2017 13:43:56 GMT',
37 verbose headers   via: '1.1 varnish',
37 verbose headers   connection: 'keep-alive',
37 verbose headers   'x-served-by': 'cache-lhr6341-LHR',
37 verbose headers   'x-cache': 'MISS',
37 verbose headers   'x-cache-hits': '0',
37 verbose headers   'x-timer': 'S1511617423.826056,VS0,VE13998',
37 verbose headers   vary: 'Accept-Encoding, Accept' }
38 verbose request invalidating C:\Users\ADMIN\AppData\Roaming\npm-cache\registry.npmjs.org\wjs-cli on PUT
39 error publish Failed PUT 403
40 verbose stack Error: You cannot publish over the previously published version 0.0.5. : wjs-cli
40 verbose stack     at makeError (C:\Program Files\nodejs\node_modules\npm\node_modules\npm-registry-client\lib\request.js:302:12)
40 verbose stack     at CachingRegistryClient.<anonymous> (C:\Program Files\nodejs\node_modules\npm\node_modules\npm-registry-client\lib\request.js:290:14)
40 verbose stack     at Request._callback (C:\Program Files\nodejs\node_modules\npm\node_modules\npm-registry-client\lib\request.js:210:14)
40 verbose stack     at Request.self.callback (C:\Program Files\nodejs\node_modules\npm\node_modules\request\request.js:187:22)
40 verbose stack     at emitTwo (events.js:106:13)
40 verbose stack     at Request.emit (events.js:191:7)
40 verbose stack     at Request.<anonymous> (C:\Program Files\nodejs\node_modules\npm\node_modules\request\request.js:1048:10)
40 verbose stack     at emitOne (events.js:96:13)
40 verbose stack     at Request.emit (events.js:188:7)
40 verbose stack     at IncomingMessage.<anonymous> (C:\Program Files\nodejs\node_modules\npm\node_modules\request\request.js:969:12)
41 verbose statusCode 403
42 verbose pkgid wjs-cli
43 verbose cwd C:\Users\ADMIN\Desktop\WebJS
44 error Windows_NT 10.0.15063
45 error argv "C:\\Program Files\\nodejs\\node.exe" "C:\\Program Files\\nodejs\\node_modules\\npm\\bin\\npm-cli.js" "publish"
46 error node v6.10.3
47 error npm  v3.10.10
48 error code E403
49 error You cannot publish over the previously published version 0.0.5. : wjs-cli
50 error If you need help, you may report this error at:
50 error     <https://github.com/npm/npm/issues>
51 verbose exit [ 1, true ]
